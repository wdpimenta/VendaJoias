/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ifirst.karine;

import br.ifirst.karine.consultas.FrmConsultaBanho;
import br.ifirst.karine.daos.BanhoDao;
import br.ifirst.karine.daos.ProdutoDao;
import br.ifirst.karine.entities.Banho;
import br.ifirst.karine.entities.ProdutoBanho;
import br.ifirst.karine.utils.Util;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.Collection;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Wanderson
 */
public class FrmBanho extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    private final BanhoDao banhoDao = new BanhoDao();
    private final ProdutoDao produtoDao = new ProdutoDao();
    private Banho banhoTemp = null;

    /**
     * Creates new form FrmBanho
     *
     * @param parent
     * @param modal
     */
    public FrmBanho(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        fieldSigla = new javax.swing.JTextField();
        fieldNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldValorGrama = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        limparButton = new javax.swing.JButton();
        excluirButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        fieldCodigo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fieldAtualizarPreco = new javax.swing.JCheckBox();

        setTitle("Cadastro de banhos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setText("Sigla");

        fieldSigla.setDocument(new br.ifirst.karine.utils.FieldLimitNoCharSpecial(2, true)
        );
        fieldSigla.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        fieldNome.setDocument(new br.ifirst.karine.utils.FieldLimitNoCharSpecial(30, true));
        fieldNome.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        jLabel3.setText("Banho");

        fieldValorGrama.setDocument(new br.ifirst.karine.utils.FieldLimitMoney(5,4));
        fieldValorGrama.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldValorGrama.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldValorGrama.setText("0");
        fieldValorGrama.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldValorGramaFocusGained(evt);
            }
        });

        jLabel4.setText("Valor por grama");

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        okButton.setText("Salvar");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        limparButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        limparButton.setText("Novo");
        limparButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparButtonActionPerformed(evt);
            }
        });

        excluirButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        excluirButton.setText("Excluir");
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fieldCodigo.setDocument(new br.ifirst.karine.utils.FieldLimitNumber(9)
        );
        fieldCodigo.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldCodigo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldCodigoKeyPressed(evt);
            }
        });

        jLabel5.setText("Código");

        fieldAtualizarPreco.setText("Atualizar preço de produto vinculados");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fieldCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(fieldSigla, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fieldValorGrama, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldAtualizarPreco, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limparButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(excluirButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, excluirButton, limparButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fieldValorGrama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldSigla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(fieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(excluirButton)
                    .addComponent(limparButton)
                    .addComponent(fieldAtualizarPreco))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fieldNome, fieldSigla, fieldValorGrama});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void fieldValorGramaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldValorGramaFocusGained
        fieldValorGrama.selectAll();
    }//GEN-LAST:event_fieldValorGramaFocusGained

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        doValidaDadosAndSave();

        //doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void limparButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparButtonActionPerformed

        int showInternalConfirmDialog = JOptionPane.showConfirmDialog(this, "Deseja limpar tela", "limpar", JOptionPane.OK_CANCEL_OPTION);

        if (showInternalConfirmDialog == JOptionPane.OK_OPTION) {
            doLimparTela();
        }
    }//GEN-LAST:event_limparButtonActionPerformed

    private void excluirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirButtonActionPerformed
        doExcluir();
    }//GEN-LAST:event_excluirButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void fieldCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCodigoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            long aLong = Util.getLong(fieldCodigo);
            if (aLong > 0) {
                doLimparTela();
                banhoTemp = banhoDao.find(aLong);

                if (banhoTemp != null) {
                    doPreencheForm(banhoTemp);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Banho com o código [%s] infromado não encotrando", aLong));
                }

            }
        }
    }//GEN-LAST:event_fieldCodigoKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FrmConsultaBanho frmConsultaBanho = new FrmConsultaBanho(this, true);
        frmConsultaBanho.setVisible(true);

        if (frmConsultaBanho.getReturnStatus() == FrmConsultaBanho.RET_OK) {
            banhoTemp = frmConsultaBanho.getBanhoSelecionado();
            doPreencheForm(banhoTemp);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        fieldSigla.requestFocus();
        this.setLocationRelativeTo(this.getParent());

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
        
        
    }//GEN-LAST:event_formWindowOpened

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton excluirButton;
    private javax.swing.JCheckBox fieldAtualizarPreco;
    private javax.swing.JTextField fieldCodigo;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JTextField fieldSigla;
    private javax.swing.JTextField fieldValorGrama;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton limparButton;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

    private void doExcluir() {
        int showInternalConfirmDialog = JOptionPane.showConfirmDialog(this, "Deseja excluir cadastro", "excluir", JOptionPane.OK_CANCEL_OPTION);

        if (showInternalConfirmDialog == JOptionPane.OK_OPTION) {
            long id = Util.getLong(fieldCodigo);
            banhoDao.remove(new Banho(id));
            doLimparTela();
            JOptionPane.showMessageDialog(this, "Banho excluido com sucesso");
        }
    }

    private void doLimparTela() {
        fieldCodigo.setText("");
        fieldNome.setText("");
        fieldSigla.setText("");
        fieldValorGrama.setText("0");
        fieldAtualizarPreco.setSelected(false);
        banhoTemp = null;
    }

    private void doValidaDadosAndSave() {
        boolean isErro = false;
        StringBuilder sb = new StringBuilder("Erros no cadastro de banho");

        long id = Util.getLong(fieldCodigo);

        if (banhoTemp == null) {
            banhoTemp = new Banho(id);
        }

        banhoTemp.setNome(fieldNome.getText().trim());
        banhoTemp.setSigla(fieldSigla.getText().trim());
        banhoTemp.setValorGrama(new BigDecimal(fieldValorGrama.getText().replaceAll(",", ".")));

        if (banhoTemp.getNome().isEmpty() || banhoTemp.getNome().length() < 3) {
            sb.append("\n").append(String.format("Campo Nome do banho não informado ou menor que 3 digitos [%s]", banhoTemp.getNome()));
            isErro = true;
        }
        if (banhoTemp.getSigla().isEmpty()) {
            sb.append("\n").append(String.format("Campo Sigla do banho não informado"));
            isErro = true;
        }
        if (banhoTemp.getValorGrama().compareTo(BigDecimal.ZERO) < 1) {
            sb.append("\n").append(String.format("Campo Valor do grama do banho tem que ser superior a zero (0)"));
            isErro = true;
        }

        if (isErro) {
            JOptionPane.showMessageDialog(this, sb.toString());
        } else {
            doSalvarBanho();
        }
    }

    private void doSalvarBanho() {
        if (banhoTemp.getId() > 0) {
            banhoDao.edit(banhoTemp);
        } else {
            banhoTemp.setId(null);
            banhoDao.create(banhoTemp);
            doPreencheForm(banhoTemp);
        }
        
        if(fieldAtualizarPreco.isSelected()){
            Collection<ProdutoBanho> produtoBanhoCollection = banhoTemp.getProdutoBanhoCollection();
            for (ProdutoBanho produtoBanho : produtoBanhoCollection) {
                produtoBanho.setValorTotal(produtoBanho.getGramas().multiply(banhoTemp.getValorGrama()));
                
                produtoDao.edit(produtoBanho.getProduto());
                
            }
            
        }

        JOptionPane.showMessageDialog(this, "Dados salvos com sucesso");
        doLimparTela();
    }

    private void doPreencheForm(Banho b) {
        fieldCodigo.setText(String.valueOf(b.getId()));
        fieldNome.setText(b.getNome());
        fieldSigla.setText(b.getSigla());
        fieldValorGrama.setText(b.getValorGrama().toString());
    }
}
