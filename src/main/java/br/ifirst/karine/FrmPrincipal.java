/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ifirst.karine;

import br.ifirst.karine.consultas.FrmConsultaPedido;
import br.ifirst.karine.consultas.FrmConsultaCliente;
import br.ifirst.karine.consultas.FrmConsultaProduto;
import br.ifirst.karine.daos.ClienteDao;
import br.ifirst.karine.daos.PedidoDao;
import br.ifirst.karine.daos.ProdutoDao;
import br.ifirst.karine.entities.Cliente;
import br.ifirst.karine.entities.EStatus;
import br.ifirst.karine.entities.Pedido;
import br.ifirst.karine.entities.PedidoItem;
import br.ifirst.karine.entities.PedidoItemBanho;
import br.ifirst.karine.entities.Produto;
import br.ifirst.karine.entities.ProdutoBanho;
import br.ifirst.karine.importacoes.FrmImportBanho;
import br.ifirst.karine.importacoes.FrmImportBanhoProduto;
import br.ifirst.karine.importacoes.FrmImportImagemProduto;
import br.ifirst.karine.importacoes.FrmImportProduto;
import br.ifirst.karine.relatorios.JPRPedidoDataSource;
import br.ifirst.karine.relatorios.JPRPeditoItemBanhoDataSource;
import br.ifirst.karine.relatorios.RelPedido;
import br.ifirst.karine.relatorios.RelPedidoItemCliente;
import br.ifirst.karine.tables.TablePedidoItemBanho;
import br.ifirst.karine.utils.EMF;
import br.ifirst.karine.utils.Util;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Wanderson
 */
public class FrmPrincipal extends javax.swing.JFrame {

    private Pedido pedidoTemp = null;
    private Produto produtoTemp = null;
    private final ClienteDao clienteDao = new ClienteDao();
    private final ProdutoDao produtoDao = new ProdutoDao();
    private final PedidoDao pedidoDao = new PedidoDao();

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        fieldCodigoCliente.requestFocus();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);

        jMenuUsuario.setVisible(false);
        jMenuUsuario.setEnabled(false);

        jMenuTrocaUsuario.setVisible(false);
        jMenuTrocaUsuario.setEnabled(false);

        doLimparTela();

        URL url = this.getClass().getResource("/resources/konze-ico.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(iconeTitulo);

        fieldMessage.setText(String.valueOf(EMF.get().getProperties().get("javax.persistence.jdbc.driver")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        fieldMessage = new javax.swing.JLabel();
        fieldNomeCliente = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        fieldDate = new javax.swing.JLabel();
        okButton3 = new javax.swing.JButton();
        okButton4 = new javax.swing.JButton();
        excluirButton = new javax.swing.JButton();
        limparButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        fieldCodigoCliente = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        fieldCodigoProduto = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        fieldPainelImagem = new javax.swing.JScrollPane();
        fieldImagem = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldPedidoItens = new javax.swing.JTable();
        fieldReferencia = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLblIcone = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuTrocaUsuario = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuUsuario = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();

        jMenuItem5.setText("jMenuItem5");

        jMenu3.setText("jMenu3");

        jMenu4.setText("File");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        jMenuItem7.setText("jMenuItem7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KaOnze");

        fieldNomeCliente.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldNomeCliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Produto");

        jLabel2.setText("CÃ³digo cliente");

        jLabel10.setText("Data cadastro");

        fieldDate.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fieldDate.setText("15/09/2015");

        okButton3.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        okButton3.setText("+");
        okButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton3ActionPerformed(evt);
            }
        });

        okButton4.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        okButton4.setText("+");
        okButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton4ActionPerformed(evt);
            }
        });

        excluirButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        excluirButton.setText("Excluir");
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirButtonActionPerformed(evt);
            }
        });

        limparButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        limparButton.setText("Novo");
        limparButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparButtonActionPerformed(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        okButton.setText("Salvar");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        fieldCodigoCliente.setDocument(new br.ifirst.karine.utils.FieldLimitNumber(9)
        );
        fieldCodigoCliente.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldCodigoCliente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldCodigoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldCodigoClienteKeyPressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        fieldCodigoProduto.setDocument(new br.ifirst.karine.utils.FieldLimitNumber(9)
        );
        fieldCodigoProduto.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldCodigoProduto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldCodigoProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldCodigoProdutoKeyPressed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jButton3.setText("...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        fieldPainelImagem.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Imagem do selecionada"));

        fieldImagem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fieldPainelImagem.setViewportView(fieldImagem);

        fieldPedidoItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        fieldPedidoItens.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fieldPedidoItensMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(fieldPedidoItens);

        fieldReferencia.setDocument(new br.ifirst.karine.utils.FieldLimit(20,true)
        );
        fieldReferencia.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        fieldReferencia.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldReferencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldReferenciaKeyPressed(evt);
            }
        });

        jLabel5.setText("ReferÃªncia");

        jLblIcone.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLblIcone.setForeground(new java.awt.Color(0, 102, 204));
        jLblIcone.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLblIcone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/konze.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("V1.2");

        jMenu1.setText("Arquivo");

        jMenuTrocaUsuario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuTrocaUsuario.setText("Trocar usuÃ¡rio");
        jMenuTrocaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTrocaUsuarioActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuTrocaUsuario);

        jMenuItem9.setText("Pedido fÃ¡brica");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Cadastro");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Cliente");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem8.setText("Banho");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Produto");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuUsuario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        jMenuUsuario.setText("UsuÃ¡rio");
        jMenu2.add(jMenuUsuario);

        jMenuBar1.add(jMenu2);

        jMenu6.setText("RelatÃ³rios");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Pedidos cliente");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Importar");

        jMenuItem3.setText("Banhos");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem3);

        jMenuItem10.setText("Produtos");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenuItem11.setText("Banhos dos produtos");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem11);

        jMenuItem12.setText("Imagens dos produtos");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem12);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(fieldMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addGap(743, 743, 743)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limparButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(excluirButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldPainelImagem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fieldCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(okButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fieldReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(okButton4))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(fieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLblIcone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {excluirButton, limparButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLblIcone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldDate)
                            .addComponent(jLabel10))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fieldCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2))
                            .addComponent(fieldNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okButton3))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(5, 5, 5)
                                .addComponent(fieldCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fieldReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3)
                                    .addComponent(okButton4))))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldPainelImagem, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(okButton)
                        .addComponent(excluirButton)
                        .addComponent(limparButton)))
                .addGap(5, 5, 5))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fieldNomeCliente, okButton3});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new FrmCliente(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuTrocaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTrocaUsuarioActionPerformed
        new FrmLogin(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuTrocaUsuarioActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new FrmProduto(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        FrmConsultaPedido frmConsultaPedido = new FrmConsultaPedido(this, true);
        frmConsultaPedido.setVisible(true);

        List<Pedido> findAllByCliente = frmConsultaPedido.getFindAllByCliente();
        if (findAllByCliente != null && !findAllByCliente.isEmpty()) {
            FrmRelatorioCliente frmRelatorioCliente = new FrmRelatorioCliente(this, findAllByCliente);
            frmRelatorioCliente.setVisible(true);

            List<Pedido> pedidos = frmRelatorioCliente.getPedidos();

            if (pedidos != null && !pedidos.isEmpty()) {

                removeItensZerados(pedidos);

                JasperPrint jasperPrint = RelPedidoItemCliente.imprimirPedidoItem(new JPRPedidoDataSource(pedidos));
                if (jasperPrint != null) {
                    try {

                        JasperViewer j = new JasperViewer(jasperPrint, false);
                        //JasperViewer.viewReport(fillReport, false);
                        j.setTitle("RelatÃ³rio de compras cliente");
                        j.setVisible(true);

                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            }

        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        new FrmBanho(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void okButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton3ActionPerformed
        new FrmCliente(this, true).setVisible(true);
    }//GEN-LAST:event_okButton3ActionPerformed

    private void okButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton4ActionPerformed
        new FrmProduto(this, true).setVisible(true);
    }//GEN-LAST:event_okButton4ActionPerformed

    private void excluirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirButtonActionPerformed
        doExcluir();
    }//GEN-LAST:event_excluirButtonActionPerformed

    private void limparButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparButtonActionPerformed

        int showInternalConfirmDialog = JOptionPane.showConfirmDialog(this, "Deseja digitaÃ§Ã£o e limpar tela", "Cancelar", JOptionPane.OK_CANCEL_OPTION);
        if (showInternalConfirmDialog == JOptionPane.OK_OPTION) {
            doLimparTela();
        }
    }//GEN-LAST:event_limparButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        if (pedidoTemp.getCliente() == null) {
            JOptionPane.showMessageDialog(this, "Nenhum cliente inforamado");
        } else if (pedidoTemp.getPedidoItens().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum produto inforamado");
        } else {
            Collection<PedidoItem> pedidoItens = pedidoTemp.getPedidoItens();
            pedidoTemp.setValorTotal(BigDecimal.ZERO);
            for (PedidoItem i : pedidoItens) {
                Collection<PedidoItemBanho> pedidoItemBanhos = i.getPedidoItemBanhos();
                i.setQuantidade(BigDecimal.ZERO);
                i.setValorTotal(BigDecimal.ZERO);
                for (PedidoItemBanho ib : pedidoItemBanhos) {
                    i.setQuantidade(i.getQuantidade().add(ib.getQuantidade()));
                    i.setValorTotal(i.getValorTotal().add(ib.getValorTotal()));
                }
                pedidoTemp.setValorTotal(pedidoTemp.getValorTotal().add(i.getValorTotal()));
            }

            if (pedidoTemp.getValorTotal().compareTo(BigDecimal.ZERO) == 0) {
                JOptionPane.showMessageDialog(this, "Nenhum quantidade inforamada opara os produtos informado");
            } else {
                doValidaDadosAndSave();
            }

        }

        //doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void fieldCodigoClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCodigoClienteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            long aLong = Util.getLong(fieldCodigoCliente);
            if (aLong > 0) {
                fieldNomeCliente.setText("");
                Cliente c = clienteDao.find(aLong);

                if (c != null) {
                    doSetClientePedido(c);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Cliente com o cÃ³digo [%s] infromado nÃ£o encotrando", aLong));
                }

            }
        }
    }//GEN-LAST:event_fieldCodigoClienteKeyPressed

    private void doSetClientePedido(Cliente c) {
        pedidoTemp.setCliente(c);
        fieldNomeCliente.setText(c.getNome());
        fieldCodigoCliente.setText(String.valueOf(c.getId()));
    }

    private void fieldCodigoProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCodigoProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            long aLong = Util.getLong(fieldCodigoProduto);
            if (aLong > 0) {

                Produto prod = produtoDao.find(aLong);

                if (prod != null) {
                    doSetProdutoPedido(prod);

                } else {
                    JOptionPane.showMessageDialog(this, String.format("Produto com o cÃ³digo [%s] infromado nÃ£o encotrando", aLong));
                }

            }
            doLimparProduto();
        }
    }//GEN-LAST:event_fieldCodigoProdutoKeyPressed

    private void doSetProdutoPedido(Produto prod) {

        Collection<ProdutoBanho> produtoBanhos = prod.getProdutoBanhos();

        if (!produtoBanhos.isEmpty()) {
            if (prod.getFoto() != null) {
                fieldImagem.setIcon(new ImageIcon(prod.getFoto()));
            }
            fieldCodigoProduto.setText(String.valueOf(prod.getId()));
            fieldReferencia.setText(prod.getReferencia());

            PedidoItem pedidoItem = new PedidoItem();
            pedidoItem.setProduto(prod);

            if (!pedidoTemp.getPedidoItens().contains(pedidoItem)) {
                pedidoTemp.getPedidoItens().add(pedidoItem);

                for (ProdutoBanho produtoBanho : produtoBanhos) {
                    PedidoItemBanho pedidoItemBanho = new PedidoItemBanho();
                    pedidoItemBanho.setProdutoBanho(produtoBanho);
                    pedidoItemBanho.setQuantidade(BigDecimal.ZERO);
                    pedidoItemBanho.setValorUnitario(produtoBanho.getValorTotal());
                    pedidoItemBanho.setValorTotal(pedidoItemBanho.getQuantidade().multiply(pedidoItemBanho.getValorUnitario()));

                    pedidoItem.getPedidoItemBanhos().add(pedidoItemBanho);

                }
                TablePedidoItemBanho model = (TablePedidoItemBanho) fieldPedidoItens.getModel();
                model.addList((List<PedidoItemBanho>) pedidoItem.getPedidoItemBanhos());
            }

        } else {
            JOptionPane.showMessageDialog(this, "Produto nÃ£o pode ser vendido pois nÃ£o tem banho definido");
        }

    }

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        final FrmRelatorio frmRelatorio = new FrmRelatorio(this, new PedidoSelecionaEvent(), true);
        frmRelatorio.setVisible(true);

        if (frmRelatorio.getPedidos() != null && !frmRelatorio.getPedidos().isEmpty()) {

            JasperPrint imprimirPedido = RelPedido.imprimirPedido(new JPRPedidoDataSource(frmRelatorio.getPedidos()));

            try {

//                List l = fillReport.getPages();
//                JasperPrintManager.printPages(fillReport, 0, l.size() - 1, false);
                JasperViewer j = new JasperViewer(imprimirPedido, false);
                //JasperViewer.viewReport(fillReport, false);

                j.setTitle("RelatÃ³rio de venda");
                j.setVisible(true);

                //JasperPrintManager.printReport(fillReport, false);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        FrmConsultaCliente frmConsultaCliente = new FrmConsultaCliente(this, true);
        frmConsultaCliente.setVisible(true);

        if (frmConsultaCliente.getReturnStatus() == FrmConsultaCliente.RET_OK) {
            doSetClientePedido(frmConsultaCliente.getClienteSelecionado());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        FrmConsultaProduto frmConsultaProduto = new FrmConsultaProduto(this, true);
        frmConsultaProduto.setVisible(true);

        if (frmConsultaProduto.getReturnStatus() == FrmConsultaCliente.RET_OK) {
            Produto prod = frmConsultaProduto.getProdutoSelecionado();
            doSetProdutoPedido(prod);
            doLimparProduto();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fieldPedidoItensMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldPedidoItensMouseClicked
//        if (evt.getClickCount() == 2) {
//            int rowIndex = fieldPedidoItens.getSelectedRow();
//            TablePedidoItem model = (TablePedidoItem) fieldPedidoItens.getModel();
//            doSelecionaProduto(model.get(rowIndex));
//        }
    }//GEN-LAST:event_fieldPedidoItensMouseClicked

    private void fieldReferenciaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldReferenciaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String ref = fieldReferencia.getText().trim();
            if (!ref.isEmpty()) {

                Produto prod = produtoDao.findByReferencia(ref);

                if (prod != null) {
                    doSetProdutoPedido(prod);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Produto com a referÃªncia [%s] infromado nÃ£o encotrando", ref));
                }

            }
            doLimparProduto();
        }
    }//GEN-LAST:event_fieldReferenciaKeyPressed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new FrmImportBanho(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        new FrmImportProduto(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        new FrmImportBanhoProduto(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        new FrmImportImagemProduto(this, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem12ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excluirButton;
    private javax.swing.JTextField fieldCodigoCliente;
    private javax.swing.JTextField fieldCodigoProduto;
    private javax.swing.JLabel fieldDate;
    private javax.swing.JLabel fieldImagem;
    private javax.swing.JLabel fieldMessage;
    private javax.swing.JLabel fieldNomeCliente;
    private javax.swing.JScrollPane fieldPainelImagem;
    private javax.swing.JTable fieldPedidoItens;
    private javax.swing.JTextField fieldReferencia;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLblIcone;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuTrocaUsuario;
    private javax.swing.JMenuItem jMenuUsuario;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton limparButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okButton3;
    private javax.swing.JButton okButton4;
    // End of variables declaration//GEN-END:variables

    private void doExcluir() {
        int showInternalConfirmDialog = JOptionPane.showConfirmDialog(this, "Deseja excluir cadastro", "excluir", JOptionPane.OK_CANCEL_OPTION);

        if (showInternalConfirmDialog == JOptionPane.OK_OPTION) {
            if (pedidoTemp != null) {
                pedidoDao.remove(pedidoTemp);
                doLimparTela();
                JOptionPane.showMessageDialog(this, "Pedido excluido com sucesso");
            }
        }
    }

    private void doLimparTela() {
        pedidoTemp = new Pedido(0L);
        pedidoTemp.setPedidoItens(new ArrayList<PedidoItem>());
        pedidoTemp.setDataCadastro(new Date());
        pedidoTemp.setStatus(EStatus.ABERTO);
        pedidoTemp.setValorTotal(BigDecimal.ZERO);

        fieldPedidoItens.setModel(new TablePedidoItemBanho());

        fieldReferencia.setText("");
        fieldCodigoCliente.setText("");
        fieldCodigoProduto.setText("");
        fieldNomeCliente.setText("");
        fieldImagem.setIcon(null);
        fieldDate.setText(Util.sdf.format(new Date()));
        produtoTemp = null;
    }

    private void doLimparProduto() {
        fieldReferencia.setText("");
        fieldCodigoProduto.setText("");
        produtoTemp = null;
    }

    private void doValidaDadosAndSave() {
        if (pedidoTemp.getId() > 0) {
            pedidoDao.edit(pedidoTemp);
        } else {
            pedidoTemp.setId(null);
            pedidoDao.create(pedidoTemp);

        }

        doLimparTela();

        if (pedidoTemp.getId() != null && pedidoTemp.getId() > 0) {
            JOptionPane.showMessageDialog(this, String.format("Pedido salvo com o nÃºmero [%s]", pedidoTemp.getId()));
        }
    }

    private void doAddPedidoItem() {
//        if (produtoTemp != null) {
//
//            //TablePedidoItemBanho modelBanho = (TablePedidoItemBanho) fieldPedidoItenBanhos.getModel();
//
//            PedidoItem pedidoItem = new PedidoItem();
//            pedidoItem.setProduto(produtoTemp);
//            pedidoItem.setPedido(pedidoTemp);
//            pedidoItem.setPedidoItemBanhos(modelBanho.getAll());
//            pedidoItem.setQuantidade(BigDecimal.ZERO);
//            pedidoItem.setValorTotal(BigDecimal.ZERO);
//
//            for (PedidoItemBanho b : pedidoItem.getPedidoItemBanhos()) {
//                b.setPedidoItem(pedidoItem);
//                pedidoItem.setQuantidade(pedidoItem.getQuantidade().add(b.getQuantidade()));
//                pedidoItem.setValorTotal(pedidoItem.getValorTotal().add(b.getValorTotal()));
//
//                pedidoTemp.setValorTotal(pedidoTemp.getValorTotal().add(pedidoItem.getValorTotal()));
//            }
//            //pedidoItem.setQuantidade(BigDecimal.ZERO);
//            //
//            //pedidoItem.setValorUnitario(BigDecimal.ZERO);
//            TablePedidoItem model = (TablePedidoItem) fieldPedidoItens.getModel();
//
//            if (!model.isExists(pedidoItem)) {
//                model.add(pedidoItem);
//            } else {
//
//                PedidoItem pedidoItemx = model.get(pedidoItem);
//                pedidoItem.setId(pedidoItemx.getId());
//                model.update(pedidoItem);
//            }
//
//            doLimparProduto();
//
//        }
//
//        if (pedidoItemTemp != null) {
//            pedidoItemTemp.setPedido(pedidoTemp);
//            TablePedidoItem model = (TablePedidoItem) fieldPedidoItenBanhos.getModel();
//            if (!model.isExists(pedidoItemTemp)) {
//                model.add(pedidoItemTemp);
//            } else {
//                model.update(pedidoItemTemp);
//            }
//        }
    }

    private void doPreenchePedido(Pedido pedidoTemp) {

        TablePedidoItemBanho model = (TablePedidoItemBanho) fieldPedidoItens.getModel();
        Collection<PedidoItem> pedidoItens = pedidoTemp.getPedidoItens();

        for (PedidoItem pedidoIten : pedidoItens) {
            model.addList((List<PedidoItemBanho>) pedidoIten.getPedidoItemBanhos());
        }

        fieldCodigoCliente.setText(String.valueOf(pedidoTemp.getCliente().getId()));
        fieldNomeCliente.setText(pedidoTemp.getCliente().toString());

        fieldCodigoProduto.setText("");
        //fieldProdutoBanho.setModel(new DefaultComboBoxModel());
        fieldImagem.setIcon(null);
        //fieldQuantidadeProduto.setText("1");
        //fieldValorTotalItem.setText("");
    }

    private void removeItensZerados(List<Pedido> pedidos) {
        for (Pedido pedido : pedidos) {
            Collection<PedidoItem> pedidoItens = pedido.getPedidoItens();
            for (PedidoItem pedidoIten : pedidoItens) {
                Collection<PedidoItemBanho> pedidoItemBanhos = pedidoIten.getPedidoItemBanhos();

                for (Iterator<PedidoItemBanho> iterator = pedidoItemBanhos.iterator(); iterator.hasNext();) {
                    PedidoItemBanho next = iterator.next();
                    if (next.getQuantidade().compareTo(BigDecimal.ZERO) <= 0) {
                        iterator.remove();
                    }
                }
            }

        }
    }

    class PedidoSelecionaEvent implements IPedido {

        @Override
        public void selectedPedido(Pedido pedido) {
            pedidoTemp = pedido;
            doPreenchePedido(pedidoTemp);
        }

    }
}
